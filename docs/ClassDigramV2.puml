@startuml

class Program {
   - boolean isRunning;
   - ArrayList<Tournament> tournaments;
   - ArrayList<Team> newTeams;
   - UI ui;
   - HashMap<String, Menu> menus;
    + void start()
    + void run()
    + void quit()
}



abstract class Menu {
    - String name
    - String[] msgOptions
    - UI ui
    + void clearScreen()
    - void updateMenus(HashMap<String, Menu> menus)
    + void show(HashMap<String, Menu> menus)
    + void show(HashMap<String, Menu> menus, String lastOptionKey)
    # int getNumberOfOptions()
}

class QuitMenu {
    Program app
    + void show(HashMap<String, Menu> menus)
}

class MainMenu {
    ArrayList<Tournament> tournaments
    + void show(HashMap<String, Menu> menus)
}

class TournamentsMenu {
    + void show(HashMap<String, Menu> menus)
}

class NewTournamentMenu {
    + void show(HashMap<String, Menu> menus)
}

class UI{
    - Scanner sc
    + String getUserOption(String msg, int numOfValidOptions, String lastOptionKey)
    + String getUserOption(String msg, String[] vaildOptions)
    + String getUserInput(String msg)
    + void printOptions(String[] msgOptions, String lastOptionKey)
    + void newLine()
    + void println(String msg)
    + void print(String msg)
    + void clear()
}

class IO{
    - Scanner sc
    + void readFromFile(String path)
    + void writeToFile(String path)
}

abstract class Tournament {
     # String name
     # Sport tournamentType
     # ArrayList<Team> contenders
     # MatchProgram program
     # ArrayList<TeamTournametHistory> history

     + {abstract} void createMatchProgram(String matchType)
     + {abstract} MatchProgram getMatchProgram()
     + {abstract} String toString()
     + {abstract} void viewTeamsRanking()
     + {abstract} void viewTeams()
}
class Sport {
    + String SPORTNAME
    - ArrayList<String> rules

    + ArrayList<String> getRules()
    + void addRule()
}
class GroupTournament
{
    - ArrayList<Group> groups
    - KnockOutTournament finals
    + void createMatchProgram(String matchType)
    + MatchProgram getMatchProgram()
    + String toString()
    + void viewTeamsRanking()
    + void viewGroupsRanking()
    + void viewTeams()
}

class TournamentTeam {
    - Team team
    - int point
    - int score

    + void addPoint()
    + void addScore()
}

class Group {
    ArrayList<TournamentTeam> members

    + ArrayList<TournamentTeam> getMembers()
    + void sortRanking()
}

class KnockOutTournament
{

    + void createMatchProgram(String matchType))
    + MatchProgram getMatchProgram()
    + String toString()
    + void viewTeamsRanking()
    + void viewTeams()
}

class TournametHistory{
    - LinkedMap<String, int>
    - ArrayList<Match> matchs
}

class Team {
    - String name
    - ArrayList<Player> teamMember
    - TeamHistory history

    + TeamHistory getHistory()
    + String getName()
    + void setName()
    + ArrayList<Player> getMembers()
}

class TeamHistory {
    - LinkedMap<String, int> teamStreak
    - LinkedMap<String, int> tournametHistoryResults
    - ArrayList<Match> matchs

    + void addMatch()
    + void addtournametHistoryResult()
    - void updateTeamStreak()
    + String toString()
}

class Player {
    - String name

    + String getName()
}

class MatchProgram {
    - ArrayList<Match> matchs

    - void createMatch(Team HomeTeam, Team GuestTeam)
    + void createMatchProgram()
    + Match getMatchByID()
    + void changeMatchContenders()
    + String toString()
}

abstract class Match {
    - MatchResult result
    - Team[] teams
    - Date date
    - Team winner

    + Date getDate()
    + {abstract} void setResult(int HomeScore, int GuestScore)
    + {abstract} int[] getScore()
    - {abstract} void setWinner()
    + {abstract} Team getWinner()
}

class MatchByTime {
    - int minutes

    + void setMinutes()
    + int getMinutes()
    + int[] getScore()
    + void setResult(int HomeScore, int GuestScore)
    - void setWinner()
    + Team getWinner()
}

class MatchByScore {


    + int[] getScore()
    + void setResult(int HomeScore, int GuestScore)
    - void setWinner()
    + Team getWinner()
}

class MatchResult {
    - int HomeScore
    - int GuestScore

    + void setResult(int HomeScore, int GuestScore)
    + int[] calculateScore()
}


Team::members o-- Player
Team::history o-- TeamHistory


Match::result o-- MatchResult
Match::winner o-- Team
Match <|-- MatchByScore
Match <|-- MatchByTime

Tournament::tournametHistoryResults o-- Sport
Tournament::history o-- TournametHistory
Tournament::program o-- MatchProgram
Tournament::contenders o-- Team
Tournament <|-- KnockOutTournament
Tournament <|-- GroupTournament

MatchProgram::matchs o-- Match


Group::members o-- TournamentTeam
GroupTournament::groups o-- Group
GroupTournament::finals o-- KnockOutTournament

TournamentTeam::team o-- Team
TournametHistory::matchs o-- Match
TeamHistory::matchs o-- Match

Menu <|-- MainMenu
Menu <|-- TournamentsMenu
Menu <|-- NewTournamentMenu
Menu <|-- QuitMenu

Program --o QuitMenu::app
Program::menus o-- Menu
Program::ui o-- UI
Program::tournaments o-- Tournament
Program::newTeams o-- Team
Menu::UI o-- UI


@enduml