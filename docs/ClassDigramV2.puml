@startuml
package entries{
    class Main{
        + {static} void main(String[] args)
    }
}

package ui{
    class Program {
        - boolean isRunning
        - HashMap<String, Tournament>  tournaments
        - HashMap<String, Team>  teams
        - UI ui
        - IO io
        - Navigator navigation

        + void start()
        + void run()
        + void quit()
        - void setupNavigation()
        - void loadData()
        - void saveData()
    }

    class UI{
        - Scanner sc

        + String getUserOption(String msg, String[] vaildOptions)
        + String getUserOption(String msg, int numOfValidOptions, String lastOptionKey)
        + String getUserInput(String msg)
        + String getUserInputNumber(String msg)
        + void waitForUser()
        + void printOptions(String[] msgOptions, String lastOptionKey)
        + void println(String msg)
        + void newLine()
        + void print(String msg)
        + void clear()
    }
    package navigation{
        abstract class Menu {
            - String[] msgOptions
            # String name
            # UI ui
            - boolean isHeaderShown

            + void clearScreen()
            - void showHeader()
            # void showCustomHeader(String customHeader)
            - void showOptions(String lastOptionKey)
            + {abstract} void show(Navigator navigation)
            # void showMenu(String lastOptionKey)
            # int getNumberOfOptions()
            + String getName()
        }

        class Navigator {
            - HashMap<String, Menu> navigation
            - ArrayList<String> previousMenus

            + void goTo(String destination)
            + Menu goManuelTo(String destination)
            + void goBack()
            + void addDestination(Menu menu)
            - void updateCurrentMenu(String name)
            + void setCurrentMenu(String name)
        }

        class StartMenu {
            + void show(Navigator navigation)
            - void logInAdmin(Navigator navigation)
        }

        class QuitMenu {
            - Program app

            + void show(Navigator navigation)
        }

        class AdminMenu {
            + void show(Navigator navigation)
        }

        class TournamentsMenu {
            - HashMap<String, Tournament> tournaments

            + void show(Navigator navigation)
            - void goToTournament(Navigator navigation)
            - void showAllTournaments(Navigator navigation)
        }

        class TournamentMenu {
            - Tournament tournament

            + void show(Navigator navigation)
            + void show(Navigator navigation, Tournament tournament)
            - void showConfigMatchFinished(Navigator navigation)
            - void showRanking(Navigator navigation)
            - void showContenders(Navigator navigation)
            - void showMatchProgram(Navigator navigation)
        }

        class NewTournamentMenu {
            - HashMap<String, Tournament> tournaments

            + void show(Navigator navigation)
            - void showNewKnockOutTournament(Navigator navigation)
            - KnockOutTournament createNewKnockOutTournament()
        }

         class TeamsMenu {
            - HashMap<String, Team> teams

            + void show(Navigator navigation)
            - void goToTeam(Navigator navigation)
            - void showAllTeams(Navigator navigation)
        }

        class TeamMenu {
            - Team team

            + void show(Navigator navigation)
            + void show(Navigator navigation, Team team)
            - void showTeamMembers(Navigator navigation)
            - void showTeamStreak(Navigator navigation)
            - void showEditTeamMembers(Navigator navigation)
            - void showAddNewMember(Navigator navigation)
            - void showRemoveMember(Navigator navigation)
        }

        class NewTeamMenu {
            - HashMap<String, Team> teams

            + void show(Navigator navigation)
            - void createNewTeam(Navigator navigation)
            - Playerlayer createPlayer()
        }
    }
}
package database
{
    class IO{
        - Scanner sc
        + void readFromFile(String path)
        + void writeToFile(String path)
        + void saveTournamentToFile(String path, Tournament tournament)
        + void saveTeamsToFile(String path, HashMap<String, Team> teams)
        + HashMap<String, Team> loadTeams(String path)
        + HashMap<String, Tournament> loadTournaments(String path)
        + void saveTournamentsToDir(String path, HashMap<String, Tournament> tournaments)
    }
}

package domain{
    package tournament{
        abstract class Tournament {
             # String name
             # Sport tournamentType
             # ArrayList<TournamentTeam> contenders
             # MatchProgram program
             # ArrayList<TournametHistory> history

             + ArrayList<TournamentTeam> getContenders()
             + MatchProgram getMatchProgram()
             + {abstract} void createMatchProgram(String matchType)
             + {abstract} String viewTeamsRanking()
             + String getName()
        }

        class Sport {
            + String SPORTNAME
            - ArrayList<String> rules

            + void addRule(string a)
            + String getSPORTNAME()
            + ArrayList<String> getRules()
        }

        class GroupTournament
        {
            - ArrayList<Group> groups
            - KnockOutTournament finals

            + void createMatchProgram(String matchType)
            + String viewTeamsRanking()
            + String toString()
        }

        class TournamentTeam {
            - Team team
            - int point
            - int score

            + Team getTeam()
            + int getPoint()
            + int getScore()
            + void addPoint(int pointAmount)
            + void addScore(int scoreAmount)
            + String getName()
            + int compareTo(TournamentTeam otherTeam)
        }

        class Group {
            + ArrayList<TournamentTeam> getMembers()
            + void setMembers(ArrayList<TournamentTeam> a)
            + void addMember(TournamentTeam a)
            + void sortRanking()
        }

        class KnockOutTournament
        {
            + void createMatchProgram(String matchType))
            + String viewTeamsRanking()
        }

        class TournametHistory{
            - ArrayList<Match> matches
            + ArrayList<Match> getMatches()
            + void addMatch(Match a)
        }
    }
    package team{
        class Team {
            - String name
            - ArrayList<Player> teamMembers
            - TeamHistory history

            + String getName()
            + void setName(String name)
            + ArrayList<Player> getTeamMembers()
            + void setTeamMembers(ArrayList<Player> teamMembers)
            + void addMember(Player a)
            + void removeMember(Player a)
            + TeamHistory getHistory()
            + void setHistory(TeamHistory history)
            + String toString()
        }

        class TeamHistory {
            - LinkedHashMap<String, Integer> teamStreak
            - LinkedHashMap<String, Integer> tournametHistoryResults
            - ArrayList<Match> matches
            - Team team

            + LinkedHashMap<String, Integer> getTeamStreak()
            + void addMatch(Match match)
            + void addTournametHistoryResult(String tournament, int ranking)
            - void updateTeamStreak(Match match)
            + void setTeamStreak(LinkedHashMap<String, Integer> teamStreak)
            + LinkedHashMap<String, Integer> getTournametHistoryResults()
            + void setTournametHistoryResults(LinkedHashMap<String, Integer> tournametHistoryResults)
            + ArrayList<Match> getMatches()
            + void setMatches(ArrayList<Match> matches)
            + Team getTeam()
            + void setTeam(Team team)
            + String toString()
        }

        class Player {
            - String name

            + String getName()
            + String setName(String name)
            + String toString()
        }
    }
    package match {
        class MatchProgram {
            - ArrayList<ArrayList<Match>> knockoutBracket
            - ArrayList<Match> allMatches
            - ArrayList<Match> upcomingMatches
            - int currentRound
            - ArrayList<TournamentTeam> teams
            - int[] tourSize
            - String scoreOrTIme

            + void setMatchType(String matchType)
            + void addTeam(Team team)
            + void removeTeam(String name)
            + void removeTeam(Team team)
            + ArrayList<TournamentTeam> getTeams()
            + ArrayList<Match> getAllMatches()
            + ArrayList<Match> getUpcomingMatches()
            + void advanceKnockoutTournament()
            + String createMatchProgram()
            - Match createEmptyMatch()
            + void switchTeams(Match m1, int t1, Match m2, int t2)
            + void changeMatchContenders(Match m, TournamentTeam t, int ab)
            - void checkIfInTeams(TournamentTeam t)
            + String toString()
        }

        class Match {
            - MatchResult result
            - TournamentTeam[] teams
            - Date date
            - TournamentTeam winner

            + TournamentTeam getTeam(int i)
            + setTeams(TournamentTeam homeTeam, TournamentTeam guestTeam)
            + exchangeTeamX(TournamentTeam replacingTeam, int x)
            + String homeAndGuestTeam()
            + setDate(Date date)
            + Date getDate()
            + void setResult(int HomeScore, int GuestScore)
            + int[] getScore()
            + int[] getCalculatedScore()
            + void setWinner()
            + Team getWinner()
            + String shortToString()
            + String toString()
        }

        class MatchByTime {
            - int minutes

            + void setMinutes()
            + int getMinutes()
        }

        class MatchResult {
            - int HomeScore
            - int GuestScore

            + void setResult(int HomeScore, int GuestScore)
            + int[] calculateScore()
            + int[] getScore()
        }
    }
}

Team o-- Player
Team o--o TeamHistory

Match o-- MatchResult
Match o-- TournamentTeam
Match <|-- MatchByTime

Tournament o-- Sport
Tournament o-- TournametHistory
Tournament o-- MatchProgram
Tournament o-- TournamentTeam
Tournament <|-- KnockOutTournament
Tournament <|-- GroupTournament

MatchProgram o-- Match
MatchProgram o-- TournamentTeam

Group o-- TournamentTeam
GroupTournament o-- Group
GroupTournament o-- KnockOutTournament

TournamentTeam o-- Team
TournametHistory o-- Match
TeamHistory o-- Match

Menu <|-- AdminMenu
Menu <|-- TournamentsMenu
Menu <|-- TournamentMenu
Menu <|-- NewTournamentMenu
Menu <|-- QuitMenu
Menu <|-- TeamsMenu
Menu <|-- TeamMenu
Menu <|-- NewTeamMenu
Menu <|-- StartMenu
Menu o-- UI

Navigator o-- Menu

TeamsMenu o-- Team
TeamMenu o-- Team
NewTeamMenu o-- Team

TournamentsMenu o-- Tournament
TournamentMenu o-- Tournament
NewTournamentMenu o-- Tournament

Program --o QuitMenu
Program o-- Menu
Program o-- UI
Program o-- Tournament
Program o-- Team
Program o-- IO
Program o-- Navigator

Main -- Program
@enduml